* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    background-color: #f0f0f0;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  header {
    width: 100%;
    background-color: #333;
    color: white;
    padding: 10px;
    text-align: center;
  }
  
  main {
    max-width: 800px;
    width: 100%;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin: 20px;
    padding: 20px;
  }
  
  h1, h2 {
    margin-bottom: 10px;
  }
  
  .form-container {
    display: flex;
    flex-direction: column;
    margin-bottom: 20px;
  }
  
  .form-container label {
    margin-top: 10px;
  }
  
  .form-container input, .form-container select {
    padding: 8px;
    font-size: 16px;
    margin-top: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  button {
    margin-top: 10px;
    padding: 10px;
    font-size: 16px;
    color: white;
    background-color: #28a745;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #218838;
  }
  
  ul {
    list-style: none;
    padding-left: 0;
  }
  
  ul li {
    background-color: #f9f9f9;
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  ul li button {
    background-color: #dc3545;
    cursor: pointer;
  }
  
  ul li button:hover {
    background-color: #c82333;
  }

import { initializeApp } from "https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js";
import { getFirestore, collection, getDocs, doc, getDoc, addDoc, setDoc, query, where } from "https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js";
import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js";

const firebaseConfig = {
    apiKey: "AIzaSyB8sWu3ZG6NWvlEKQHRi23c7CgPPy_6yag",
    authDomain: "apuntagym.firebaseapp.com",
    projectId: "apuntagym",
    storageBucket: "apuntagym.appspot.com",
    messagingSenderId: "522093591127",
    appId: "1:522093591127:web:27e2e56085d50c85b18112",
    measurementId: "G-PY9MT94G92"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

const muscleGroupSelect = document.getElementById('muscle-group');
const exerciseSelect = document.getElementById('exercise');
const weightInput = document.getElementById('weight');
const repetitionsInput = document.getElementById('repetitions');
const exerciseDateInput = document.getElementById('exercise-date');
const saveExerciseButton = document.getElementById('save-exercise');
const addMuscleGroupButton = document.getElementById('add-muscle-group');
const addExerciseButton = document.getElementById('add-exercise');
const debugInfo = document.getElementById('debug-info');

let currentUser;

onAuthStateChanged(auth, user => {
    if (!user) {
        window.location.href = 'inicio.html';
    } else {
        currentUser = user;
        initializeMuscleGroups();
        initializeUserMuscleGroups();
    }
});

document.getElementById('logout-button').addEventListener('click', () => {
    signOut(auth).then(() => {
        window.location.href = 'inicio.html';
    }).catch(error => {
        console.error('Error al cerrar sesión:', error);
    });
});

function initializeMuscleGroups() {
    const muscleGroupsRef = collection(db, "muscleGroups");
    getDocs(muscleGroupsRef).then(snapshot => {
        if (snapshot.empty) {
            console.log("No se encontraron grupos musculares, inicializando grupos predeterminados.");
            debugInfo.innerText = "Inicializando grupos musculares por defecto...";
            initializeDefaultMuscleGroups(muscleGroupsRef);
        } else {
            console.log("Grupos musculares encontrados:", snapshot.docs.map(doc => doc.id));
            debugInfo.innerText = "Grupos musculares cargados: " + snapshot.docs.map(doc => doc.id).join(", ");
            muscleGroupSelect.innerHTML = ''; // Limpiar las opciones existentes
            snapshot.forEach(doc => {
                const option = document.createElement("option");
                option.textContent = doc.id;
                option.value = doc.id;
                muscleGroupSelect.appendChild(option);
            });
            updateExerciseOptions();
        }
    }).catch(error => {
        console.error("Error cargando grupos musculares:", error);
        debugInfo.innerText = "Error cargando grupos musculares: " + error;
    });
}

function initializeUserMuscleGroups() {
    const userMuscleGroupsRef = collection(db, "userMuscleGroups");
    const userMuscleGroupsQuery = query(userMuscleGroupsRef, where("userId", "==", currentUser.uid));
    getDocs(userMuscleGroupsQuery).then(snapshot => {
        snapshot.forEach(doc => {
            const option = document.createElement("option");
            option.textContent = doc.id.replace("Personalizado-", "");
            option.value = `${doc.id} (Personalizado)`;
            muscleGroupSelect.appendChild(option);
        });
        updateExerciseOptions();
    }).catch(error => {
        console.error("Error cargando grupos musculares personalizados:", error);
        debugInfo.innerText = "Error cargando grupos musculares personalizados: " + error;
    });
}

function initializeDefaultMuscleGroups(muscleGroupsRef) {
    const initialGroups = {
        Pecho: ['Press Banca', 'Press Inclinado', 'Aperturas'],
        Espalda: ['Dominadas', 'Remo con Barra', 'Jalón al Pecho'],
        Brazos: ['Curl con Barra', 'Tríceps Fondo', 'Martillo'],
        Piernas: ['Sentadilla', 'Prensa', 'Peso Muerto'],
        Hombros: ['Press Militar', 'Elevaciones Laterales', 'Pájaro']
    };
    const promises = [];
    Object.keys(initialGroups).forEach(group => {
        const promise = setDoc(doc(muscleGroupsRef, group), { exercises: initialGroups[group] });
        promises.push(promise);
    });

    Promise.all(promises).then(() => {
        console.log("Grupos musculares predeterminados inicializados.");
        initializeMuscleGroups(); // Recargar los grupos musculares
    }).catch(error => {
        console.error("Error inicializando grupos musculares predeterminados:", error);
    });
}

function updateExerciseOptions() {
    const selectedGroup = muscleGroupSelect.value.replace(" (Personalizado)", "").replace("Personalizado-", "");
    const isCustomGroup = muscleGroupSelect.value.includes(" (Personalizado)");
    const groupRef = isCustomGroup ? doc(db, "userMuscleGroups", `Personalizado-${selectedGroup}`) : doc(db, "muscleGroups", selectedGroup);

    getDoc(groupRef).then(docSnap => {
        if (docSnap.exists()) {
            const data = docSnap.data();
            exerciseSelect.innerHTML = ''; // Limpiar las opciones anteriores
            data.exercises.forEach(exercise => {
                const option = document.createElement("option");
                option.value = exercise;
                option.textContent = exercise;
                exerciseSelect.appendChild(option);
            });
        } else {
            console.log(`No se encontraron ejercicios para el grupo ${selectedGroup}`);
            debugInfo.innerText = "No se encontraron ejercicios para el grupo seleccionado.";
        }
    }).catch(error => {
        console.error("Error cargando ejercicios:", error);
        debugInfo.innerText = "Error cargando ejercicios: " + error;
    });
}

function addMuscleGroup() {
    const newMuscleGroupName = document.getElementById('new-muscle-group').value.trim();
    if (newMuscleGroupName && currentUser) {
        const newGroupRef = doc(db, "userMuscleGroups", `Personalizado-${newMuscleGroupName}`);
        setDoc(newGroupRef, {
            userId: currentUser.uid,
            exercises: []
        }).then(() => {
            console.log("Nuevo grupo muscular personalizado añadido:", newMuscleGroupName);
            debugInfo.innerText = "Nuevo grupo muscular personalizado añadido: " + newMuscleGroupName;
            const option = document.createElement("option");
            option.textContent = `${newMuscleGroupName} (Personalizado)`;
            option.value = `Personalizado-${newMuscleGroupName} (Personalizado)`;
            muscleGroupSelect.appendChild(option);
            document.getElementById('new-muscle-group').value = ''; // Limpiar el campo de texto
            updateExerciseOptions();
        }).catch(error => {
            console.error("Error añadiendo grupo muscular personalizado:", error);
            debugInfo.innerText = "Error añadiendo grupo muscular personalizado: " + error;
        });
    } else {
        console.log("No se introdujo nombre de grupo muscular.");
        debugInfo.innerText = "No se introdujo nombre de grupo muscular.";
    }
}

function addExercise() {
    const newExerciseName = document.getElementById('new-exercise').value.trim();
    const muscleGroup = muscleGroupSelect.value.replace(" (Personalizado)", "").replace("Personalizado-", "");
    const isCustomGroup = muscleGroupSelect.value.includes(" (Personalizado)");

    const groupRef = isCustomGroup ? doc(db, "userMuscleGroups", `Personalizado-${muscleGroup}`) : null;

    if (newExerciseName && groupRef) {
        getDoc(groupRef).then(docSnap => {
            if (docSnap.exists()) {
                const exercises = docSnap.data().exercises;
                if (!exercises.includes(newExerciseName)) {
                    exercises.push(newExerciseName);
                    setDoc(groupRef, { exercises }, { merge: true }).then(() => {
                        console.log("Ejercicio añadido:", newExerciseName);
                        debugInfo.innerText = "Ejercicio añadido: " + newExerciseName;
                        updateExerciseOptions();
                        document.getElementById('new-exercise').value = ''; // Limpiar el campo de texto
                    }).catch(error => {
                        console.error("Error añadiendo nuevo ejercicio:", error);
                        debugInfo.innerText = "Error añadiendo nuevo ejercicio: " + error;
                    });
                } else {
                    console.log("El ejercicio ya existe:", newExerciseName);
                    debugInfo.innerText = "El ejercicio ya existe: " + newExerciseName;
                }
            } else {
                console.log("El grupo muscular personalizado no existe:", muscleGroup);
                debugInfo.innerText = "El grupo muscular personalizado no existe: " + muscleGroup;
            }
        }).catch(error => {
            console.error("Error obteniendo grupo muscular personalizado:", error);
            debugInfo.innerText = "Error obteniendo grupo muscular personalizado: " + error;
        });
    } else {
        console.log("No se seleccionó grupo muscular personalizado o nombre de ejercicio.");
        debugInfo.innerText = "No se seleccionó grupo muscular personalizado o nombre de ejercicio.";
    }
}

function saveExercise() {
    const muscleGroup = muscleGroupSelect.value.replace(" (Personalizado)", "").replace("Personalizado-", "");
    const isCustomGroup = muscleGroupSelect.value.includes(" (Personalizado)");
    const exercise = exerciseSelect.value;
    const weight = weightInput.value;
    const repetitions = repetitionsInput.value;
    const dateTime = exerciseDateInput.value ? new Date(exerciseDateInput.value).toISOString() : new Date().toISOString();

    if (muscleGroup && exercise && weight && repetitions && dateTime && currentUser) {
        addDoc(collection(db, "exerciseRecords"), {
            userId: currentUser.uid,
            muscleGroup: isCustomGroup ? `Personalizado-${muscleGroup}` : muscleGroup,
            exercise,
            weight: Number(weight),
            repetitions: Number(repetitions),
            dateTime
        }).then(() => {
            console.log("Registro de ejercicio guardado:", { muscleGroup, exercise, weight, repetitions, dateTime });
            debugInfo.innerText = "Registro de ejercicio guardado: " + exercise;
            clearForm();
        }).catch(error => {
            console.error("Error guardando registro de ejercicio:", error);
            debugInfo.innerText = "Error guardando registro de ejercicio: " + error;
        });
    } else {
        console.log("Datos del formulario incompletos.");
        debugInfo.innerText = "Datos del formulario incompletos.";
    }
}

function clearForm() {
    weightInput.value = '';
    repetitionsInput.value = '';
    exerciseDateInput.value = '';
}

muscleGroupSelect.addEventListener('change', updateExerciseOptions);
saveExerciseButton.addEventListener('click', saveExercise);
addMuscleGroupButton.addEventListener('click', addMuscleGroup);
addExerciseButton.addEventListener('click', addExercise);

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro de Ejercicios</title>
    <link rel="stylesheet" href="styles.css">
    <!-- Importar los scripts de Firebase y el archivo JavaScript personalizado -->
    <script src="https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js"></script>
</head>
<body>
    <header>
        <h1>Registro de Ejercicios</h1>
        <button id="logout-button">Cerrar Sesión</button>
        <a href="historial.html"><button>Ver Historial</button></a>
        <a href="resultado.html"><button>Resultados</button></a>
    </header>
    <main>
        <section id="form-section">
            <div class="form-container">
                <label for="muscle-group">Grupo Muscular:</label>
                <select id="muscle-group"></select>
                <label for="exercise">Ejercicio:</label>
                <select id="exercise"></select>
                <label for="weight">Peso (kg):</label>
                <input type="number" id="weight" min="0" step="1">
                <label for="repetitions">Repeticiones:</label>
                <input type="number" id="repetitions" min="0" step="1">
                <label for="exercise-date">Fecha:</label>
                <input type="datetime-local" id="exercise-date">
                <button id="save-exercise">Guardar Ejercicio</button>
            </div>
        </section>
        <section id="custom-section">
            <div class="form-container">
                <h2>Añadir Nuevos Grupos/Ejercicios</h2>
                <label for="new-muscle-group">Nuevo Grupo Muscular:</label>
                <input type="text" id="new-muscle-group">
                <button id="add-muscle-group">Añadir Grupo Muscular</button>
                <label for="new-exercise">Nuevo Ejercicio:</label>
                <input type="text" id="new-exercise">
                <button id="add-exercise">Añadir Ejercicio</button>
            </div>
        </section>
        <div id="debug-info"></div>
    </main>
    <script src="scripts.js" type="module"></script>
</body>
</html>

quiero un html con su js para poder filtrar los resultados del usuario por  ejercicio deben salir todos los ejercicios del usuario los de los gurpos musculars añadidos por el usuario y los demas tambien, y ademas  ordenados por peso  y para los que tienen el mismo peso que salgan arriba o primero los de mas repeticiones.


Sí, es posible crear una red neuronal que aprenda a jugar al juego de Snake utilizando HTML, CSS y JavaScript. Este proceso implica varios pasos y conceptos clave que incluyen la creación del juego Snake, la implementación de una red neuronal y el uso de algoritmos de aprendizaje automático, como el aprendizaje por refuerzo, para entrenar la red neuronal.

Aquí te presento una guía paso a paso para lograrlo:

1. Crear el Juego de Snake
Primero, necesitas tener una versión funcional del juego de Snake. Este juego se puede programar usando HTML, CSS y JavaScript. Aquí tienes una estructura básica de cómo podrías implementarlo:

Estructura HTML

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Snake Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <script src="script.js"></script>
</body>
</html>
Estilos CSS (style.css)

body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f0f0f0;
}

canvas {
    background-color: #000;
}
JavaScript del Juego (script.js)

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const scale = 20;
const rows = canvas.height / scale;
const columns = canvas.width / scale;

let snake;

(function setup() {
    snake = new Snake();
    fruit = new Fruit();
    fruit.pickLocation();

    window.setInterval(() => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        fruit.draw();
        snake.update();
        snake.draw();

        if (snake.eat(fruit)) {
            fruit.pickLocation();
        }

        snake.checkCollision();
        document.querySelector('.score').innerText = snake.total;
    }, 250);
}());

window.addEventListener('keydown', e => {
    const direction = e.key.replace('Arrow', '');
    snake.changeDirection(direction);
});

function Snake() {
    this.x = 0;
    this.y = 0;
    this.xSpeed = scale * 1;
    this.ySpeed = 0;
    this.total = 0;
    this.tail = [];

    this.draw = function() {
        ctx.fillStyle = "#FFFFFF";

        for (let i=0; i<this.tail.length; i++) {
            ctx.fillRect(this.tail[i].x, this.tail[i].y, scale, scale);
        }

        ctx.fillRect(this.x, this.y, scale, scale);
    };

    this.update = function() {
        for (let i=0; i<this.tail.length - 1; i++) {
            this.tail[i] = this.tail[i+1];
        }

        this.tail[this.total - 1] = { x: this.x, y: this.y };

        this.x += this.xSpeed;
        this.y += this.ySpeed;

        if (this.x >= canvas.width) {
            this.x = 0;
        }

        if (this.y >= canvas.height) {
            this.y = 0;
        }

        if (this.x < 0) {
            this.x = canvas.width - scale;
        }

        if (this.y < 0) {
            this.y = canvas.height - scale;
        }
    };

    this.changeDirection = function(direction) {
        switch(direction) {
            case 'Up':
                if (this.ySpeed === 0) {
                    this.xSpeed = 0;
                    this.ySpeed = -scale * 1;
                }
                break;
            case 'Down':
                if (this.ySpeed === 0) {
                    this.xSpeed = 0;
                    this.ySpeed = scale * 1;
                }
                break;
            case 'Left':
                if (this.xSpeed === 0) {
                    this.xSpeed = -scale * 1;
                    this.ySpeed = 0;
                }
                break;
            case 'Right':
                if (this.xSpeed === 0) {
                    this.xSpeed = scale * 1;
                    this.ySpeed = 0;
                }
                break;
        }
    };

    this.eat = function(fruit) {
        if (this.x === fruit.x && this.y === fruit.y) {
            this.total++;
            return true;
        }

        return false;
    };

    this.checkCollision = function() {
        for (let i=0; i<this.tail.length; i++) {
            if (this.x === this.tail[i].x && this.y === this.tail[i].y) {
                this.total = 0;
                this.tail = [];
            }
        }
    };
}

function Fruit() {
    this.x;
    this.y;

    this.pickLocation = function() {
        this.x = (Math.floor(Math.random() * rows - 1) + 1) * scale;
        this.y = (Math.floor(Math.random() * columns - 1) + 1) * scale;
    };

    this.draw = function() {
        ctx.fillStyle = "#4cafab";
        ctx.fillRect(this.x, this.y, scale, scale);
    };
}
2. Implementar la Red Neuronal
Para que una red neuronal controle el juego, puedes usar una biblioteca de JavaScript como TensorFlow.js. Esta biblioteca facilita la implementación de redes neuronales en el navegador.

Estructura Básica de la Red Neuronal

// Import TensorFlow.js - Puedes agregar esto en tu HTML
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>

// Definir la red neuronal
const model = tf.sequential();

model.add(tf.layers.dense({inputShape: [number_of_inputs], units: 24, activation: 'relu'}));
model.add(tf.layers.dense({units: 16, activation: 'relu'}));
model.add(tf.layers.dense({units: 4, activation: 'softmax'})); // 4 direcciones de salida: arriba, abajo, izquierda, derecha

// Compilar el modelo
model.compile({
  optimizer: 'adam',
  loss: 'categoricalCrossentropy',
  metrics: ['accuracy']
});
3. Entrenar la Red Neuronal
Para entrenar la red neuronal, necesitas simular muchas sesiones de juego y utilizar el aprendizaje por refuerzo. Aquí, el objetivo es maximizar la puntuación (la cantidad de frutas que come el snake).


async function trainModel() {
    // Datos de entrenamiento: Estados del juego, movimientos y recompensas
    const xs = tf.tensor2d(data.map(item => item.state));
    const ys = tf.tensor2d(data.map(item => item.action));

    // Entrenar el modelo
    await model.fit(xs, ys, {
        epochs: 10,
        shuffle: true,
        callbacks: {
            onEpochEnd: (epoch, log) => console.log(`Epoch ${epoch}: loss = ${log.loss}`)
        }
    });
}
4. Integrar la Red Neuronal con el Juego
Finalmente, necesitas modificar el bucle del juego para usar la red neuronal para decidir los movimientos en lugar de esperar la entrada del usuario.


(function update() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    fruit.draw();
    snake.update();
    snake.draw();

    if (snake.eat(fruit)) {
        fruit.pickLocation();
    }

    snake.checkCollision();

    // Predecir el próximo movimiento
    const predictions = model.predict(tf.tensor2d([getState()]));
    const move = predictions.argMax(1).dataSync()[0];

    snake.changeDirection(['Up', 'Down', 'Left', 'Right'][move]);

    setTimeout(update, 250);
}());

function getState() {
    // Convertir el estado del juego a una forma que la red pueda procesar
    return [snake.x, snake.y, snake.xSpeed, snake.ySpeed, fruit.x, fruit.y];
}
5. Observaciones y Mejoras
Entrenamiento: Para obtener buenos resultados, necesitarás simular y entrenar con miles de juegos.
Optimización: Puedes experimentar con diferentes arquitecturas de red, hiperparámetros y funciones de recompensa.
Depuración: Asegúrate de que la red no solo aprende a evitar colisiones, sino también a perseguir frutas activamente.
Este es un proyecto complejo pero fascinante que combina desarrollo web con aprendizaje automático. ¡Buena suerte!


