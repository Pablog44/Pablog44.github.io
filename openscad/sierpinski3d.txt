// Parámetros del fractal
profundidad_sierpinski_3d = 2; // "Paso 3" o nivel de recursión
lado_tetraedro_grande = 50;   // Tamaño del tetraedro más grande

// Módulo para dibujar un solo tetraedro a partir de sus 4 vértices
module tetraedro(v0, v1, v2, v3) {
    polyhedron(
        points = [v0, v1, v2, v3],
        faces = [
            [0, 1, 2], // Base
            [0, 3, 1], // Cara 1
            [1, 3, 2], // Cara 2
            [2, 3, 0]  // Cara 3
        ]
    );
}

// Función para calcular el punto medio entre dos puntos (vectores)
function midpoint(p1, p2) = [
    (p1[0] + p2[0]) / 2,
    (p1[1] + p2[1]) / 2,
    (p1[2] + p2[2]) / 2
];

// Módulo recursivo para el Tetraedro de Sierpinski
// p0, p1, p2, p3 son los vértices del tetraedro actual
module sierpinski_tetraedro_recursivo(nivel, p0, p1, p2, p3) {
    if (nivel == 0) {
        // Caso base: dibujar el tetraedro actual
        tetraedro(p0, p1, p2, p3);
    } else {
        // Paso recursivo:
        // Calcular los puntos medios de todas las aristas
        // Estos puntos medios formarán los vértices de los nuevos tetraedros más pequeños
        
        // Vértices de los tetraedros hijos
        // (Cada tetraedro hijo comparte un vértice original y tres nuevos puntos medios)
        
        // Hijos:
        // 1. El que está en la esquina p0
        sierpinski_tetraedro_recursivo(nivel - 1,
            p0,
            midpoint(p0, p1),
            midpoint(p0, p2),
            midpoint(p0, p3)
        );

        // 2. El que está en la esquina p1
        sierpinski_tetraedro_recursivo(nivel - 1,
            p1,
            midpoint(p1, p0), // o midpoint(p0,p1) es lo mismo
            midpoint(p1, p2),
            midpoint(p1, p3)
        );

        // 3. El que está en la esquina p2
        sierpinski_tetraedro_recursivo(nivel - 1,
            p2,
            midpoint(p2, p0),
            midpoint(p2, p1),
            midpoint(p2, p3)
        );

        // 4. El que está en la esquina p3 (el vértice superior)
        sierpinski_tetraedro_recursivo(nivel - 1,
            p3,
            midpoint(p3, p0),
            midpoint(p3, p1),
            midpoint(p3, p2)
        );
    }
}

// --- Definir los vértices del tetraedro inicial (regular) ---
s = lado_tetraedro_grande;

// Vértices de un tetraedro regular con un vértice en el origen
// y una cara en el plano XY (o ligeramente ajustado para centrar).
// Vamos a hacerlo con la base en el plano XY para simplificar.
v0_inicial = [0, 0, 0];
v1_inicial = [s, 0, 0];
v2_inicial = [s/2, s * sqrt(3)/2, 0]; // Vértice para formar triángulo equilátero en base
altura_tetraedro = s * sqrt(6)/3;     // Altura de un tetraedro regular
v3_inicial = [s/2, s * sqrt(3)/6, altura_tetraedro]; // Vértice superior (ápice)

// --- Dibujar el fractal ---
// Opcionalmente, centrar el objeto para mejor visualización
// El centroide de la base está en [s/2, s*sqrt(3)/6, 0]
// El centroide del tetraedro está a 1/4 de la altura desde la base.
// centroide_x = s/2;
// centroide_y = s*sqrt(3)/6;
// centroide_z = altura_tetraedro / 4;
// translate([-centroide_x, -centroide_y, -centroide_z]) { // Descomentar para centrar
    sierpinski_tetraedro_recursivo(profundidad_sierpinski_3d, v0_inicial, v1_inicial, v2_inicial, v3_inicial);
// } // Descomentar para centrar